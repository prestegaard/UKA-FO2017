	/*
	for (uint8_t row = 0; row < 6; row++)
	{
		for (uint8_t column = 0; column < 6; column++)
		{
			for (uint8_t add = 0; add < row + column; add++)
			{
				set_pixel(leds, row, column + add, CHSV(gHue, 255, 100));
				set_pixel(leds, row + add, column, CHSV(gHue, 255, 100));
				delay(100);
			}
			
		}
	}
*/
/*
	set_pixel(leds, 0, 0, CHSV(gHue, 255, 100));
	delay(200);
	set_pixel(leds, 0, 1, CHSV(gHue, 255, 100));
	set_pixel(leds, 1, 0, CHSV(gHue, 255, 100));
	set_pixel(leds, 1, 1, CHSV(gHue, 255, 100));
	delay(500);
	set_pixel(leds, 2, 0, CHSV(gHue, 255, 100));
	set_pixel(leds, 2, 1, CHSV(gHue, 255, 100));
	set_pixel(leds, 2, 2, CHSV(gHue, 255, 100));
	set_pixel(leds, 0, 2, CHSV(gHue, 255, 100));
	set_pixel(leds, 1, 2, CHSV(gHue, 255, 100));
	delay(500);
	set_pixel(leds, 3, 0, CHSV(gHue, 255, 100));
	set_pixel(leds, 3, 1, CHSV(gHue, 255, 100));
	set_pixel(leds, 3, 2, CHSV(gHue, 255, 100));
	set_pixel(leds, 3, 3, CHSV(gHue, 255, 100));
	set_pixel(leds, 0, 3, CHSV(gHue, 255, 100));
	set_pixel(leds, 1, 3, CHSV(gHue, 255, 100));
	set_pixel(leds, 2, 3, CHSV(gHue, 255, 100));
	delay(500);
	set_pixel(leds, 4, 0, CHSV(gHue, 255, 100));
	set_pixel(leds, 4, 1, CHSV(gHue, 255, 100));
	set_pixel(leds, 4, 2, CHSV(gHue, 255, 100));
	set_pixel(leds, 4, 3, CHSV(gHue, 255, 100));
	set_pixel(leds, 4, 4, CHSV(gHue, 255, 100));
	set_pixel(leds, 0, 4, CHSV(gHue, 255, 100));
	set_pixel(leds, 1, 4, CHSV(gHue, 255, 100));
	set_pixel(leds, 2, 4, CHSV(gHue, 255, 100));
	set_pixel(leds, 3, 4, CHSV(gHue, 255, 100));
	delay(500);*/

	

	//uint8_t offset = 0;
	//	for (uint8_t row = 0; row < 6; row++)
	//	{
	//		for (uint8_t column = offset; column <= row; column++)
	//		{
	//			set_pixel(leds, row, column, CHSV(gHue, 255, 100));
	//		}
	//		offset++;
	//	}
	//	delay(500);
	//}
	


	//// Call the current pattern function once, updating the 'leds' array
	//gPatterns[gCurrentPatternNumber]();

	//// send the 'leds' array out to the actual LED strip
	//FastLED.show();
	//// insert a delay to keep the framerate modest
	//FastLED.delay(1000 / FRAMES_PER_SECOND);

	//current_sensor_value = (digitalRead(IR_SENSOR_1_PIN) && digitalRead(IR_SENSOR_2_PIN));
	//if (!current_sensor_value && last_sensor_value) // Sensor went low
	//{
	//	msg_send.sender_id = BOX_ID;
	//	msg_send.time = random(5, 50);
	//	msg_send.hue = random(0, 255);
	//	msg_send.msg_type = random(0, 7);
	//	msg_send.value = 255;
	//	msg_send.saturation = 255;
	//	rf->write(msg_send, ADDRESS_BROADCAST_OFFSET);
	//	
	//	switch (msg_send.msg_type)
	//	{
	//	case MSG_FILL_UP:
	//		break;
	//	case MSG_FILL_DOWN:
	//		break;
	//	case MSG_SWEEP_UP:
	//		break;
	//	case MSG_SWEEP_DOWN:
	//		break;
	//	case MSG_BLINK_UP:
	//		break;
	//	case MSG_BLINK_DOWN:
	//		break;
	//	case MSG_LOOP_UP:
	//		break;
	//	case MSG_LOOP_DOWN:
	//		break;
	//	}
	//}
	//else if (rf->read(&pipe, &recv_payload))
	//{

	//	switch (recv_payload.msg_type)
	//	{
	//	case MSG_FILL_UP:
	//		break;
	//	case MSG_FILL_DOWN:
	//		break;
	//	case MSG_SWEEP_UP:
	//		break;
	//	case MSG_SWEEP_DOWN:
	//		break;
	//	case MSG_BLINK_UP:
	//		break;
	//	case MSG_BLINK_DOWN:
	//		break;
	//	case MSG_LOOP_UP:
	//		break;
	//	case MSG_LOOP_DOWN:
	//		break;
	//}